// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eKino.API.EF;

namespace eKino.API.Migrations
{
    [DbContext(typeof(MojContext))]
    [Migration("20201225173513_DBSeed_final")]
    partial class DBSeed_final
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eKino.API.Database.Dvorana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojKolona")
                        .HasColumnType("int");

                    b.Property<int>("BrojRedova")
                        .HasColumnType("int");

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Kraj_RadnogVremena")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Pocetak_RadnogVremena")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GradId");

                    b.ToTable("Dvorana");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojKolona = 8,
                            BrojRedova = 4,
                            GradId = 1,
                            Kraj_RadnogVremena = new DateTime(2020, 12, 26, 2, 35, 11, 772, DateTimeKind.Local).AddTicks(5631),
                            Naziv = "Dvorana 1",
                            Pocetak_RadnogVremena = new DateTime(2020, 12, 25, 18, 35, 11, 769, DateTimeKind.Local).AddTicks(874)
                        },
                        new
                        {
                            Id = 2,
                            BrojKolona = 9,
                            BrojRedova = 5,
                            GradId = 2,
                            Kraj_RadnogVremena = new DateTime(2020, 12, 26, 5, 35, 11, 772, DateTimeKind.Local).AddTicks(9370),
                            Naziv = "Dvorana 2",
                            Pocetak_RadnogVremena = new DateTime(2020, 12, 25, 21, 35, 11, 772, DateTimeKind.Local).AddTicks(9335)
                        },
                        new
                        {
                            Id = 3,
                            BrojKolona = 10,
                            BrojRedova = 6,
                            GradId = 3,
                            Kraj_RadnogVremena = new DateTime(2020, 12, 26, 8, 35, 11, 772, DateTimeKind.Local).AddTicks(9508),
                            Naziv = "Dvorana 3",
                            Pocetak_RadnogVremena = new DateTime(2020, 12, 26, 0, 35, 11, 772, DateTimeKind.Local).AddTicks(9502)
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumIzlaska")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TipId")
                        .HasColumnType("int");

                    b.Property<int>("ZanrId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipId");

                    b.HasIndex("ZanrId");

                    b.ToTable("Film");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 776, DateTimeKind.Local).AddTicks(3901),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 1",
                            Opis = "Kratki opis filma 1, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 1,
                            ZanrId = 1
                        },
                        new
                        {
                            Id = 2,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(565),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 2",
                            Opis = "Kratki opis filma 2, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 2,
                            ZanrId = 2
                        },
                        new
                        {
                            Id = 3,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(802),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 3",
                            Opis = "Kratki opis filma 3, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 3,
                            ZanrId = 3
                        },
                        new
                        {
                            Id = 4,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(883),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 4",
                            Opis = "Kratki opis filma 4, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 1,
                            ZanrId = 4
                        },
                        new
                        {
                            Id = 5,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(961),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 5",
                            Opis = "Kratki opis filma 5, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 2,
                            ZanrId = 5
                        },
                        new
                        {
                            Id = 6,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(1047),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 6",
                            Opis = "Kratki opis filma 6, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 3,
                            ZanrId = 1
                        },
                        new
                        {
                            Id = 7,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(1134),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 7",
                            Opis = "Kratki opis filma 7, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 1,
                            ZanrId = 2
                        },
                        new
                        {
                            Id = 8,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(1208),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 8",
                            Opis = "Kratki opis filma 8, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 2,
                            ZanrId = 3
                        },
                        new
                        {
                            Id = 9,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(1321),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 9",
                            Opis = "Kratki opis filma 9, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 3,
                            ZanrId = 4
                        },
                        new
                        {
                            Id = 10,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(1401),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 10",
                            Opis = "Kratki opis filma 10, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 1,
                            ZanrId = 5
                        },
                        new
                        {
                            Id = 11,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(1492),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 11",
                            Opis = "Kratki opis filma 11, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 2,
                            ZanrId = 1
                        },
                        new
                        {
                            Id = 12,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(1568),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 12",
                            Opis = "Kratki opis filma 12, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 3,
                            ZanrId = 2
                        },
                        new
                        {
                            Id = 13,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(1648),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 13",
                            Opis = "Kratki opis filma 13, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 1,
                            ZanrId = 3
                        },
                        new
                        {
                            Id = 14,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(1726),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 14",
                            Opis = "Kratki opis filma 14, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 2,
                            ZanrId = 4
                        },
                        new
                        {
                            Id = 15,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(1804),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 15",
                            Opis = "Kratki opis filma 15, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 3,
                            ZanrId = 5
                        },
                        new
                        {
                            Id = 16,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(1881),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 16",
                            Opis = "Kratki opis filma 16, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 1,
                            ZanrId = 1
                        },
                        new
                        {
                            Id = 17,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(1981),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 17",
                            Opis = "Kratki opis filma 17, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 2,
                            ZanrId = 2
                        },
                        new
                        {
                            Id = 18,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(2100),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 18",
                            Opis = "Kratki opis filma 18, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 3,
                            ZanrId = 3
                        },
                        new
                        {
                            Id = 19,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(2241),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 19",
                            Opis = "Kratki opis filma 19, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 1,
                            ZanrId = 4
                        },
                        new
                        {
                            Id = 20,
                            DatumIzlaska = new DateTime(2013, 12, 25, 18, 35, 11, 777, DateTimeKind.Local).AddTicks(2314),
                            Link = "https://ia803206.us.archive.org/5/items/cc-1916-10-02-the-pawnshop-512kb/CC_1916_10_02_ThePawnshop_512kb.mp4",
                            Naziv = "Film 20",
                            Opis = "Kratki opis filma 20, opis radnje i glumaca u filmu. Prikazuje se prilikom ispisa detalja o filmu.",
                            TipId = 2,
                            ZanrId = 5
                        });
                });

            modelBuilder.Entity("eKino.API.Database.FilmGlumci", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("GlumacId")
                        .HasColumnType("int");

                    b.HasKey("FilmId", "GlumacId");

                    b.HasIndex("GlumacId");

                    b.ToTable("FilmGlumci");

                    b.HasData(
                        new
                        {
                            FilmId = 1,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 1,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 2,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 2,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 3,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 3,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 4,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 4,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 5,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 5,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 6,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 6,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 7,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 7,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 8,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 8,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 9,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 9,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 10,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 10,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 11,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 11,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 12,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 12,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 13,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 13,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 14,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 14,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 15,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 15,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 16,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 16,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 17,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 17,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 18,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 18,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 19,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 19,
                            GlumacId = 1
                        },
                        new
                        {
                            FilmId = 20,
                            GlumacId = 2
                        },
                        new
                        {
                            FilmId = 20,
                            GlumacId = 1
                        });
                });

            modelBuilder.Entity("eKino.API.Database.FilmProdukcijskeKuce", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("ProdukcijskaKucaId")
                        .HasColumnType("int");

                    b.HasKey("FilmId", "ProdukcijskaKucaId");

                    b.HasIndex("ProdukcijskaKucaId");

                    b.ToTable("FilmProdukcijskeKuce");

                    b.HasData(
                        new
                        {
                            FilmId = 1,
                            ProdukcijskaKucaId = 2
                        },
                        new
                        {
                            FilmId = 2,
                            ProdukcijskaKucaId = 1
                        },
                        new
                        {
                            FilmId = 3,
                            ProdukcijskaKucaId = 2
                        },
                        new
                        {
                            FilmId = 4,
                            ProdukcijskaKucaId = 1
                        },
                        new
                        {
                            FilmId = 5,
                            ProdukcijskaKucaId = 2
                        },
                        new
                        {
                            FilmId = 6,
                            ProdukcijskaKucaId = 1
                        },
                        new
                        {
                            FilmId = 7,
                            ProdukcijskaKucaId = 2
                        },
                        new
                        {
                            FilmId = 8,
                            ProdukcijskaKucaId = 1
                        },
                        new
                        {
                            FilmId = 9,
                            ProdukcijskaKucaId = 2
                        },
                        new
                        {
                            FilmId = 10,
                            ProdukcijskaKucaId = 1
                        },
                        new
                        {
                            FilmId = 11,
                            ProdukcijskaKucaId = 2
                        },
                        new
                        {
                            FilmId = 12,
                            ProdukcijskaKucaId = 1
                        },
                        new
                        {
                            FilmId = 13,
                            ProdukcijskaKucaId = 2
                        },
                        new
                        {
                            FilmId = 14,
                            ProdukcijskaKucaId = 1
                        },
                        new
                        {
                            FilmId = 15,
                            ProdukcijskaKucaId = 2
                        },
                        new
                        {
                            FilmId = 16,
                            ProdukcijskaKucaId = 1
                        },
                        new
                        {
                            FilmId = 17,
                            ProdukcijskaKucaId = 2
                        },
                        new
                        {
                            FilmId = 18,
                            ProdukcijskaKucaId = 1
                        },
                        new
                        {
                            FilmId = 19,
                            ProdukcijskaKucaId = 2
                        },
                        new
                        {
                            FilmId = 20,
                            ProdukcijskaKucaId = 1
                        });
                });

            modelBuilder.Entity("eKino.API.Database.FilmScenaristi", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("ScenaristId")
                        .HasColumnType("int");

                    b.HasKey("FilmId", "ScenaristId");

                    b.HasIndex("ScenaristId");

                    b.ToTable("FilmScenaristi");

                    b.HasData(
                        new
                        {
                            FilmId = 1,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 1,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 2,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 2,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 3,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 3,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 4,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 4,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 5,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 5,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 6,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 6,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 7,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 7,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 8,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 8,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 9,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 9,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 10,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 10,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 11,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 11,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 12,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 12,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 13,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 13,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 14,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 14,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 15,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 15,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 16,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 16,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 17,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 17,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 18,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 18,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 19,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 19,
                            ScenaristId = 5
                        },
                        new
                        {
                            FilmId = 20,
                            ScenaristId = 6
                        },
                        new
                        {
                            FilmId = 20,
                            ScenaristId = 5
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Grad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Zenica"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Mostar"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Berlin"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "London"
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "New York"
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Komentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("KomentatorId")
                        .HasColumnType("int");

                    b.Property<string>("SadrzajKomentara")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("KomentatorId");

                    b.ToTable("Komentar");
                });

            modelBuilder.Entity("eKino.API.Database.KomentarReakcija", b =>
                {
                    b.Property<int>("KomentarId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("Reakcija")
                        .HasColumnType("int");

                    b.HasKey("KomentarId", "KorisnikId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("KomentarReakcija");
                });

            modelBuilder.Entity("eKino.API.Database.Korisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumRegistracije")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SlanjeEmaila")
                        .HasColumnType("bit");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradId");

                    b.HasIndex("UlogaId");

                    b.ToTable("Korisnik");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumRegistracije = new DateTime(2020, 12, 25, 18, 35, 11, 775, DateTimeKind.Local).AddTicks(134),
                            DatumRodjenja = new DateTime(1995, 12, 25, 18, 35, 11, 774, DateTimeKind.Local).AddTicks(6587),
                            Email = "admin@mail.com",
                            GradId = 2,
                            Ime = "Admin",
                            LozinkaHash = "rhU9y15krz72oDSAaAeYiu80a3c=",
                            LozinkaSalt = "zsoXMab3gROO2GpJdRxC4A==",
                            Prezime = "Admin",
                            SlanjeEmaila = true,
                            UlogaId = 1
                        },
                        new
                        {
                            Id = 2,
                            DatumRegistracije = new DateTime(2020, 12, 25, 18, 35, 11, 775, DateTimeKind.Local).AddTicks(1811),
                            DatumRodjenja = new DateTime(1997, 12, 25, 18, 35, 11, 775, DateTimeKind.Local).AddTicks(1722),
                            Email = "user1@mail.com",
                            GradId = 4,
                            Ime = "Korisnik",
                            LozinkaHash = "rhU9y15krz72oDSAaAeYiu80a3c=",
                            LozinkaSalt = "zsoXMab3gROO2GpJdRxC4A==",
                            Prezime = "1",
                            SlanjeEmaila = true,
                            UlogaId = 2
                        },
                        new
                        {
                            Id = 3,
                            DatumRegistracije = new DateTime(2020, 12, 25, 18, 35, 11, 775, DateTimeKind.Local).AddTicks(1889),
                            DatumRodjenja = new DateTime(1997, 12, 25, 18, 35, 11, 775, DateTimeKind.Local).AddTicks(1877),
                            Email = "user2@mail.com",
                            GradId = 3,
                            Ime = "Korisnik",
                            LozinkaHash = "rhU9y15krz72oDSAaAeYiu80a3c=",
                            LozinkaSalt = "zsoXMab3gROO2GpJdRxC4A==",
                            Prezime = "2",
                            SlanjeEmaila = true,
                            UlogaId = 2
                        },
                        new
                        {
                            Id = 4,
                            DatumRegistracije = new DateTime(2020, 12, 25, 18, 35, 11, 775, DateTimeKind.Local).AddTicks(1951),
                            DatumRodjenja = new DateTime(1997, 12, 25, 18, 35, 11, 775, DateTimeKind.Local).AddTicks(1940),
                            Email = "user3@mail.com",
                            GradId = 2,
                            Ime = "Korisnik",
                            LozinkaHash = "rhU9y15krz72oDSAaAeYiu80a3c=",
                            LozinkaSalt = "zsoXMab3gROO2GpJdRxC4A==",
                            Prezime = "3",
                            SlanjeEmaila = true,
                            UlogaId = 2
                        });
                });

            modelBuilder.Entity("eKino.API.Database.KorisnikPaket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("PaketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("PaketId");

                    b.ToTable("KorisnikPaket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KorisnikId = 2,
                            PaketId = 1
                        },
                        new
                        {
                            Id = 2,
                            KorisnikId = 3,
                            PaketId = 2
                        },
                        new
                        {
                            Id = 3,
                            KorisnikId = 4,
                            PaketId = 3
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Ocijena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataOcijena")
                        .HasColumnType("int");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("KomentatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("KomentatorId");

                    b.ToTable("Ocijena");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataOcijena = 1,
                            FilmId = 1,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 2,
                            DataOcijena = 1,
                            FilmId = 2,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 3,
                            DataOcijena = 1,
                            FilmId = 3,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 4,
                            DataOcijena = 1,
                            FilmId = 4,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 5,
                            DataOcijena = 1,
                            FilmId = 5,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 6,
                            DataOcijena = 1,
                            FilmId = 6,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 7,
                            DataOcijena = 1,
                            FilmId = 7,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 8,
                            DataOcijena = 1,
                            FilmId = 8,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 9,
                            DataOcijena = 1,
                            FilmId = 9,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 10,
                            DataOcijena = 1,
                            FilmId = 10,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 11,
                            DataOcijena = 1,
                            FilmId = 11,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 12,
                            DataOcijena = 1,
                            FilmId = 12,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 13,
                            DataOcijena = 1,
                            FilmId = 13,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 14,
                            DataOcijena = 1,
                            FilmId = 14,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 15,
                            DataOcijena = 1,
                            FilmId = 15,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 16,
                            DataOcijena = 1,
                            FilmId = 16,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 17,
                            DataOcijena = 1,
                            FilmId = 17,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 18,
                            DataOcijena = 1,
                            FilmId = 18,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 19,
                            DataOcijena = 1,
                            FilmId = 19,
                            KomentatorId = 1
                        },
                        new
                        {
                            Id = 20,
                            DataOcijena = 1,
                            FilmId = 20,
                            KomentatorId = 1
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Osoba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biografija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradId");

                    b.HasIndex("UlogaId");

                    b.ToTable("Osoba");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biografija = "Thomas Cruise Mapother IV, better known by the stage name Tom Cruise, is an American actor and producer. ",
                            DatumRodjenja = new DateTime(1980, 12, 25, 18, 35, 11, 773, DateTimeKind.Local).AddTicks(8033),
                            GradId = 6,
                            Ime = "Tom",
                            Prezime = "Cruise",
                            UlogaId = 3
                        },
                        new
                        {
                            Id = 2,
                            Biografija = "Edward Thomas Hardy CBE is an English actor and producer. After studying acting at the Drama Centre London, he made his film debut in Ridley Scott's Black Hawk Down.",
                            DatumRodjenja = new DateTime(1991, 12, 25, 18, 35, 11, 774, DateTimeKind.Local).AddTicks(277),
                            GradId = 5,
                            Ime = "Tom",
                            Prezime = "Hardy",
                            UlogaId = 3
                        },
                        new
                        {
                            Id = 3,
                            Biografija = "Scarlett Ingrid Johansson is a Danish-American actress and singer. The world's highest-paid actress since 2018, she has made multiple appearances in the Forbes Celebrity 100.",
                            DatumRodjenja = new DateTime(1988, 12, 25, 18, 35, 11, 774, DateTimeKind.Local).AddTicks(444),
                            GradId = 4,
                            Ime = "Scarlett",
                            Prezime = "Johansson",
                            UlogaId = 3
                        },
                        new
                        {
                            Id = 4,
                            Biografija = "Enis Bešlagić is a Bosnian actor. In the 2000s, he starred in several films such as Fuse, Summer in the Golden Valley, Ivko's Feast, Ram za sliku moje domovine and All for Free.",
                            DatumRodjenja = new DateTime(1984, 12, 25, 18, 35, 11, 774, DateTimeKind.Local).AddTicks(501),
                            GradId = 1,
                            Ime = "Enis",
                            Prezime = "Beslagic",
                            UlogaId = 3
                        },
                        new
                        {
                            Id = 5,
                            Biografija = "Joel Coen and Ethan Coen, collectively referred to as the Coen Brothers, are American film directors, producers, screenwriters, and editors. Their films span many genres and styles, which they frequently subvert or parody.",
                            DatumRodjenja = new DateTime(1986, 12, 25, 18, 35, 11, 774, DateTimeKind.Local).AddTicks(550),
                            GradId = 6,
                            Ime = "Ethan",
                            Prezime = "Coen",
                            UlogaId = 4
                        },
                        new
                        {
                            Id = 6,
                            Biografija = "Christopher Edward Nolan, (born 30 July 1970) is an English-American film director, screenwriter, and producer, who is known for making personal, distinctive films within the Hollywood mainstream.",
                            DatumRodjenja = new DateTime(1982, 12, 25, 18, 35, 11, 774, DateTimeKind.Local).AddTicks(602),
                            GradId = 4,
                            Ime = "Christopher",
                            Prezime = "Nolan",
                            UlogaId = 4
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Paket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Cijena")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DatumIsteka")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxOcijena")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Paket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cijena = 11.0,
                            DatumIsteka = new DateTime(2021, 1, 11, 18, 35, 11, 779, DateTimeKind.Local).AddTicks(3035),
                            DatumKreiranja = new DateTime(2020, 12, 20, 18, 35, 11, 779, DateTimeKind.Local).AddTicks(4643),
                            MaxOcijena = 1,
                            Opis = "Paket 1"
                        },
                        new
                        {
                            Id = 2,
                            Cijena = 24.0,
                            DatumIsteka = new DateTime(2021, 1, 13, 18, 35, 11, 779, DateTimeKind.Local).AddTicks(7424),
                            DatumKreiranja = new DateTime(2020, 12, 15, 18, 35, 11, 779, DateTimeKind.Local).AddTicks(7454),
                            MaxOcijena = 5,
                            Opis = "Paket 2"
                        },
                        new
                        {
                            Id = 3,
                            Cijena = 39.0,
                            DatumIsteka = new DateTime(2021, 1, 15, 18, 35, 11, 779, DateTimeKind.Local).AddTicks(7630),
                            DatumKreiranja = new DateTime(2020, 12, 10, 18, 35, 11, 779, DateTimeKind.Local).AddTicks(7636),
                            MaxOcijena = 2,
                            Opis = "Paket 3"
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Prijava", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrijavioId")
                        .HasColumnType("int");

                    b.Property<bool>("Rijeseno")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VlasnikAutPrava")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("PrijavioId");

                    b.ToTable("Prijava");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "autor@mail.com",
                            FilmId = 3,
                            Opis = "Prekrsio autorska prava",
                            PrijavioId = 2,
                            Rijeseno = false,
                            Telefon = "0602345678",
                            VlasnikAutPrava = "Dinovizija"
                        },
                        new
                        {
                            Id = 2,
                            Email = "autor2@mail.com",
                            FilmId = 5,
                            Opis = "Prekrsio autorska prava...",
                            PrijavioId = 3,
                            Rijeseno = true,
                            Telefon = "0601445678",
                            VlasnikAutPrava = "Dinovizija"
                        });
                });

            modelBuilder.Entity("eKino.API.Database.ProdukcijskaKuca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GradId");

                    b.ToTable("ProdukcijskaKuca");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GradId = 4,
                            Naziv = "FIST"
                        },
                        new
                        {
                            Id = 2,
                            GradId = 1,
                            Naziv = "Dinovizija"
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Projekcija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CijenaUlaznice")
                        .HasColumnType("float");

                    b.Property<DateTime>("DatumProjekcije")
                        .HasColumnType("datetime2");

                    b.Property<int>("DvoranaId")
                        .HasColumnType("int");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DvoranaId");

                    b.HasIndex("FilmId");

                    b.ToTable("Projekcija");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CijenaUlaznice = 8.0,
                            DatumProjekcije = new DateTime(2020, 12, 26, 18, 35, 11, 781, DateTimeKind.Local).AddTicks(681),
                            DvoranaId = 2,
                            FilmId = 2,
                            Opis = "Projekcija filma 2"
                        },
                        new
                        {
                            Id = 2,
                            CijenaUlaznice = 11.0,
                            DatumProjekcije = new DateTime(2020, 12, 27, 18, 35, 11, 781, DateTimeKind.Local).AddTicks(5475),
                            DvoranaId = 3,
                            FilmId = 4,
                            Opis = "Projekcija filma 4"
                        },
                        new
                        {
                            Id = 3,
                            CijenaUlaznice = 14.0,
                            DatumProjekcije = new DateTime(2020, 12, 28, 18, 35, 11, 781, DateTimeKind.Local).AddTicks(5695),
                            DvoranaId = 1,
                            FilmId = 6,
                            Opis = "Projekcija filma 6"
                        },
                        new
                        {
                            Id = 4,
                            CijenaUlaznice = 17.0,
                            DatumProjekcije = new DateTime(2020, 12, 29, 18, 35, 11, 781, DateTimeKind.Local).AddTicks(5758),
                            DvoranaId = 2,
                            FilmId = 8,
                            Opis = "Projekcija filma 8"
                        },
                        new
                        {
                            Id = 5,
                            CijenaUlaznice = 20.0,
                            DatumProjekcije = new DateTime(2020, 12, 30, 18, 35, 11, 781, DateTimeKind.Local).AddTicks(5820),
                            DvoranaId = 3,
                            FilmId = 10,
                            Opis = "Projekcija filma 10"
                        },
                        new
                        {
                            Id = 6,
                            CijenaUlaznice = 23.0,
                            DatumProjekcije = new DateTime(2020, 12, 31, 18, 35, 11, 781, DateTimeKind.Local).AddTicks(5889),
                            DvoranaId = 1,
                            FilmId = 12,
                            Opis = "Projekcija filma 12"
                        },
                        new
                        {
                            Id = 7,
                            CijenaUlaznice = 26.0,
                            DatumProjekcije = new DateTime(2021, 1, 1, 18, 35, 11, 781, DateTimeKind.Local).AddTicks(5956),
                            DvoranaId = 2,
                            FilmId = 14,
                            Opis = "Projekcija filma 14"
                        });
                });

            modelBuilder.Entity("eKino.API.Database.ProjekcijaDvorana", b =>
                {
                    b.Property<int>("ProjekcijaId")
                        .HasColumnType("int");

                    b.Property<int>("DvoranaId")
                        .HasColumnType("int");

                    b.HasKey("ProjekcijaId", "DvoranaId");

                    b.HasIndex("DvoranaId");

                    b.ToTable("ProjekcijaDvorana");

                    b.HasData(
                        new
                        {
                            ProjekcijaId = 1,
                            DvoranaId = 2
                        },
                        new
                        {
                            ProjekcijaId = 2,
                            DvoranaId = 3
                        },
                        new
                        {
                            ProjekcijaId = 3,
                            DvoranaId = 1
                        },
                        new
                        {
                            ProjekcijaId = 4,
                            DvoranaId = 2
                        },
                        new
                        {
                            ProjekcijaId = 5,
                            DvoranaId = 3
                        },
                        new
                        {
                            ProjekcijaId = 6,
                            DvoranaId = 1
                        },
                        new
                        {
                            ProjekcijaId = 7,
                            DvoranaId = 2
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Rezervacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumKreirnja")
                        .HasColumnType("datetime2");

                    b.Property<int?>("KupacId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjekcijaId")
                        .HasColumnType("int");

                    b.Property<int>("SjedisteKolona")
                        .HasColumnType("int");

                    b.Property<int>("SjedisteRed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KupacId");

                    b.HasIndex("ProjekcijaId");

                    b.ToTable("Rezervacija");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumKreirnja = new DateTime(2020, 12, 23, 18, 35, 11, 781, DateTimeKind.Local).AddTicks(9576),
                            KupacId = 4,
                            ProjekcijaId = 3,
                            SjedisteKolona = 1,
                            SjedisteRed = 1
                        },
                        new
                        {
                            Id = 2,
                            DatumKreirnja = new DateTime(2020, 12, 22, 18, 35, 11, 782, DateTimeKind.Local).AddTicks(672),
                            KupacId = 2,
                            ProjekcijaId = 4,
                            SjedisteKolona = 2,
                            SjedisteRed = 2
                        },
                        new
                        {
                            Id = 3,
                            DatumKreirnja = new DateTime(2020, 12, 21, 18, 35, 11, 782, DateTimeKind.Local).AddTicks(748),
                            KupacId = 3,
                            ProjekcijaId = 5,
                            SjedisteKolona = 2,
                            SjedisteRed = 2
                        },
                        new
                        {
                            Id = 4,
                            DatumKreirnja = new DateTime(2020, 12, 20, 18, 35, 11, 782, DateTimeKind.Local).AddTicks(782),
                            KupacId = 4,
                            ProjekcijaId = 6,
                            SjedisteKolona = 3,
                            SjedisteRed = 3
                        },
                        new
                        {
                            Id = 5,
                            DatumKreirnja = new DateTime(2020, 12, 19, 18, 35, 11, 782, DateTimeKind.Local).AddTicks(816),
                            KupacId = 2,
                            ProjekcijaId = 7,
                            SjedisteKolona = 3,
                            SjedisteRed = 3
                        },
                        new
                        {
                            Id = 6,
                            DatumKreirnja = new DateTime(2020, 12, 18, 18, 35, 11, 782, DateTimeKind.Local).AddTicks(853),
                            KupacId = 3,
                            ProjekcijaId = 1,
                            SjedisteKolona = 4,
                            SjedisteRed = 4
                        },
                        new
                        {
                            Id = 7,
                            DatumKreirnja = new DateTime(2020, 12, 17, 18, 35, 11, 782, DateTimeKind.Local).AddTicks(886),
                            KupacId = 4,
                            ProjekcijaId = 2,
                            SjedisteKolona = 4,
                            SjedisteRed = 4
                        },
                        new
                        {
                            Id = 8,
                            DatumKreirnja = new DateTime(2020, 12, 16, 18, 35, 11, 782, DateTimeKind.Local).AddTicks(918),
                            KupacId = 2,
                            ProjekcijaId = 3,
                            SjedisteKolona = 5,
                            SjedisteRed = 5
                        },
                        new
                        {
                            Id = 9,
                            DatumKreirnja = new DateTime(2020, 12, 15, 18, 35, 11, 782, DateTimeKind.Local).AddTicks(951),
                            KupacId = 3,
                            ProjekcijaId = 4,
                            SjedisteKolona = 5,
                            SjedisteRed = 5
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Tip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivTipa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tip");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NazivTipa = "Igrani"
                        },
                        new
                        {
                            Id = 2,
                            NazivTipa = "Animirani"
                        },
                        new
                        {
                            Id = 3,
                            NazivTipa = "Dokumentarac"
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Uloga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivUloge")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Uloga");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NazivUloge = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            NazivUloge = "Guest"
                        },
                        new
                        {
                            Id = 3,
                            NazivUloge = "Glumac"
                        },
                        new
                        {
                            Id = 4,
                            NazivUloge = "Scenarista"
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Zanr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivZanra")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zanr");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NazivZanra = "Akcija"
                        },
                        new
                        {
                            Id = 2,
                            NazivZanra = "Drama"
                        },
                        new
                        {
                            Id = 3,
                            NazivZanra = "Komendija"
                        },
                        new
                        {
                            Id = 4,
                            NazivZanra = "Horor"
                        },
                        new
                        {
                            Id = 5,
                            NazivZanra = "Sci-Fi"
                        });
                });

            modelBuilder.Entity("eKino.API.Database.Dvorana", b =>
                {
                    b.HasOne("eKino.API.Database.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.Film", b =>
                {
                    b.HasOne("eKino.API.Database.Tip", "Tip")
                        .WithMany()
                        .HasForeignKey("TipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.API.Database.Zanr", "Zanr")
                        .WithMany()
                        .HasForeignKey("ZanrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.FilmGlumci", b =>
                {
                    b.HasOne("eKino.API.Database.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.API.Database.Osoba", "Glumac")
                        .WithMany()
                        .HasForeignKey("GlumacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.FilmProdukcijskeKuce", b =>
                {
                    b.HasOne("eKino.API.Database.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.API.Database.ProdukcijskaKuca", "ProdukcijskaKuca")
                        .WithMany()
                        .HasForeignKey("ProdukcijskaKucaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.FilmScenaristi", b =>
                {
                    b.HasOne("eKino.API.Database.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.API.Database.Osoba", "Scenarist")
                        .WithMany()
                        .HasForeignKey("ScenaristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.Komentar", b =>
                {
                    b.HasOne("eKino.API.Database.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.API.Database.Korisnik", "Komentator")
                        .WithMany()
                        .HasForeignKey("KomentatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.KomentarReakcija", b =>
                {
                    b.HasOne("eKino.API.Database.Komentar", "Komentar")
                        .WithMany()
                        .HasForeignKey("KomentarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.API.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.Korisnik", b =>
                {
                    b.HasOne("eKino.API.Database.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.API.Database.Uloga", "Uloga")
                        .WithMany()
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.KorisnikPaket", b =>
                {
                    b.HasOne("eKino.API.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.API.Database.Paket", "Paket")
                        .WithMany()
                        .HasForeignKey("PaketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.Ocijena", b =>
                {
                    b.HasOne("eKino.API.Database.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.API.Database.Korisnik", "Komentator")
                        .WithMany()
                        .HasForeignKey("KomentatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.Osoba", b =>
                {
                    b.HasOne("eKino.API.Database.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradId");

                    b.HasOne("eKino.API.Database.Uloga", "Uloga")
                        .WithMany()
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.Prijava", b =>
                {
                    b.HasOne("eKino.API.Database.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.API.Database.Korisnik", "Prijavio")
                        .WithMany()
                        .HasForeignKey("PrijavioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.ProdukcijskaKuca", b =>
                {
                    b.HasOne("eKino.API.Database.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradId");
                });

            modelBuilder.Entity("eKino.API.Database.Projekcija", b =>
                {
                    b.HasOne("eKino.API.Database.Dvorana", "Dvorana")
                        .WithMany()
                        .HasForeignKey("DvoranaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.API.Database.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.ProjekcijaDvorana", b =>
                {
                    b.HasOne("eKino.API.Database.Dvorana", "Dvorana")
                        .WithMany()
                        .HasForeignKey("DvoranaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eKino.API.Database.Projekcija", "Projekcija")
                        .WithMany()
                        .HasForeignKey("ProjekcijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eKino.API.Database.Rezervacija", b =>
                {
                    b.HasOne("eKino.API.Database.Korisnik", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacId");

                    b.HasOne("eKino.API.Database.Projekcija", "Projekcija")
                        .WithMany()
                        .HasForeignKey("ProjekcijaId");
                });
#pragma warning restore 612, 618
        }
    }
}
